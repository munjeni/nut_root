#!/system/bin/sh
#
# Dual Recovery for many Sony Xperia devices!
#
# Author:
#   [NUT]
#
# - Thanks go to DooMLoRD for the keycodes and a working example!
# - My gratitude also goes out to Androxyde for his sometimes briliant
#   ideas to simplify things while writing the scripts!
#
###########################################################################

set +x
_PATH="$PATH"
export PATH="/system/xbin:/system/bin:/sbin"

# Constants
LOGDIR="XZDualRecovery"
SECUREDIR="/system/.XZDualRecovery"
PREPLOG="/tmp/${LOGDIR}/preperation.log"
LOGFILE="XZDualRecovery.log"

# Nodes setup
BOOTREC_LED_RED="/sys/class/leds/$(/system/xbin/busybox ls -1 /sys/class/leds|/system/xbin/busybox grep red)/brightness"
BOOTREC_LED_GREEN="/sys/class/leds/$(/system/xbin/busybox ls -1 /sys/class/leds|/system/xbin/busybox grep green)/brightness"
BOOTREC_LED_BLUE="/sys/class/leds/$(/system/xbin/busybox ls -1 /sys/class/leds|/system/xbin/busybox grep blue)/brightness"

# Function definitions
TECHOL(){
  _TIME=`/system/xbin/busybox date +"%H:%M:%S"`
  echo "${_TIME} >> $*" >> ${PREPLOG}
  return 0
}
TEXECL(){
  _TIME=`/system/xbin/busybox date +"%H:%M:%S"`
  echo "${_TIME} >> $*" >> ${PREPLOG}
  $* 2>&1 >> ${PREPLOG}
  _RET=$?
  echo "${_TIME} >> RET=${_RET}" >> ${PREPLOG}
  return ${_RET}
}

SETLED() {
	if [ "$1" = "on" ]; then

		TECHOL "Turn on LED R: $2 G: $3 B: $4"
		echo "$2" > ${BOOTREC_LED_RED}
		echo "$3" > ${BOOTREC_LED_GREEN}
		echo "$4" > ${BOOTREC_LED_BLUE}

	else
		TECHOL "Turn off LED"
		echo "0" > ${BOOTREC_LED_RED}
		echo "0" > ${BOOTREC_LED_GREEN}
		echo "0" > ${BOOTREC_LED_BLUE}
	fi
}
EXIT2CM(){
	# Turn on a red led, as a visual warning to the user
	SETLED on 255 0 0

	sleep 2

	# Turn off LED
	SETLED off

	umount -l /storage/sdcard1

	export PATH="${_PATH}"

	exec /system/bin/chargemon.stock
	exit 0
}

NOGOODBUSYBOX="true"
# Busybox setup, chosing the one that supports lzcat, as it is vital for this recovery setup!
if [ -x "/system/xbin/busybox" -a ! -n "${BUSYBOX}" ]; then
	CHECK=`/system/xbin/busybox --list | /system/xbin/busybox grep lzcat | /system/xbin/busybox wc -l`
	if [ "$CHECK" -gt "0" ]; then
 		BUSYBOX="/system/xbin/busybox"
		NOGOODBUSYBOX="false"
	fi
fi
# Fallback to the one in /system/bin, but only if it supports lzcat...
if [ -x "/system/bin/busybox" -a "$NOGOODBUSYBOX" = "true" ]; then
	CHECK=`/system/bin/busybox --list | /system/bin/busybox grep lzcat | /system/bin/busybox wc -l`
	if [ "$CHECK" -gt "0" ]; then
		BUSYBOX="/system/bin/busybox"
		NOGOODBUSYBOX="false"
	fi
fi

#https://github.com/android/platform_system_core/commit/e18c0d508a6d8b4376c6f0b8c22600e5aca37f69
#The busybox in all of the recoveries has not yet been patched to take this in account.
${BUSYBOX} blockdev --setrw $(${BUSYBOX} find /dev/block/platform/msm_sdcc.1/by-name/ -iname "system")

# If no good busybox has been found, we will replace the one in xbin
# This was never so important but with the release of the JB4.3 ROM on the Z1, Z1 Compact and Z Ultra
# this missing busybox will break full root provided by XZDualRecovery making these
# user errors that more painful.
if [ "$NOGOODBUSYBOX" = "true" -a -d "$SECUREDIR" ]; then

	$SECUREDIR/busybox mount -o remount,rw /system
	$SECUREDIR/busybox cp $SECUREDIR/busybox /system/xbin/
	chmod 755 /system/xbin/busybox
	BUSYBOX="/system/xbin/busybox"
	${BUSYBOX} mount -o remount,ro /system

fi

MADESECDIR="false"
if [ ! -d "$SECUREDIR" -a -x "${BUSYBOX}" ]; then

	${BUSYBOX} mount -o remount,rw /system
	${BUSYBOX} mkdir $SECUREDIR
	if [ "$?" = "0" ]; then
		MADESECDIR="true"
		${BUSYBOX} cp ${BUSYBOX} $SECUREDIR/
		${BUSYBOX} mount -o remount,ro /system
	fi

fi

# We can actually safely asume a busybox exists in /system/xbin (as XZDualRecovery installs one there)
${BUSYBOX} mount -o remount,rw rootfs /
MADETMP="false"
if [ ! -d "/tmp" ]; then

	mkdir /tmp
	${BUSYBOX} mount -t tmpfs tmpfs /tmp
	if [ "$?" = "0" ]; then
		MADETMP="true"
	fi

fi
${BUSYBOX} mkdir /tmp/XZDualRecovery
${BUSYBOX} mount -o remount,ro rootfs /

# Kickstarting log
DATETIME=`${BUSYBOX} date +"%d-%m-%Y %H:%M:%S"`
echo "START Dual Recovery at ${DATETIME}: STAGE 1." > ${PREPLOG}

# If $SECUREDIR was created, it will be noted in the log.
if [ "$MADESECDIR" = "true" ]; then

	echo "Created $SECUREDIR!" >> ${PREPLOG}

fi

# If /tmp was created, it will be noted in the log.
if [ "$MADETMP" = "true" ]; then

	echo "Created /tmp!" >> ${PREPLOG}

fi

# If the busybox binary has been replaced by a known good one, this will let us know in the log.
if [ "$NOGOODBUSYBOX" = "true" ]; then

	echo "Replaced busybox in /system/xbin!" >> ${PREPLOG}

fi

if [ -x "${BUSYBOX}" ]; then

	TECHOL "Using ${BUSYBOX}"

	TEXECL mount -o remount,rw rootfs /
	TEXECL mount -o remount,rw /system

	if [ -f "/system/xbin/disableric" ]; then
		TEXECL mount -t securityfs -o nosuid,nodev,noexec securityfs /sys/kernel/security
		TEXECL mkdir -p /sys/kernel/security/sony_ric
		TEXECL chmod 755 /sys/kernel/security/sony_ric
		TEXECL echo "0" > /sys/kernel/security/sony_ric/enable
	fi

	if [ -x "${BUSYBOX}" -a -x "/system/bin/dualrecovery.sh" ]; then

		TECHOL "Install busybox to /sbin..."
		${BUSYBOX} cp ${BUSYBOX} /sbin/

		if [ ! -f "/system/etc/.xzdrbusybox" ]; then

			TECHOL "Creating symlinks in /system/xbin to all functions of busybox."
			# Create a symlink for each of the supported commands
			for sym in `${BUSYBOX} --list`; do
				TECHOL "Linking ${BUSYBOX} to /system/xbin/$sym"
				${BUSYBOX} ln -sf ${BUSYBOX} /system/xbin/$sym
			done

			${BUSYBOX} touch /system/etc/.xzdrbusybox

		else

			TECHOL "Skipping creation of busybox symlinks."

		fi

		export PATH="/system/xbin"

		TECHOL "Copying recovery files to /sbin"
		TEXECL cp /system/bin/dualrecovery.sh /sbin/init.sh
		TEXECL chmod 755 /sbin/init.sh

	else

		TECHOL "Key files missing, exitting!"

		EXIT2CM

	fi

	TEXECL mount -o remount,ro rootfs /
	TEXECL mount -o remount,ro /system

fi

# Create mountpoint if it doesn't exist
if [ ! -d /storage/sdcard1 ]; then
	TEXECL mount -o remount,rw rootfs /
	TEXECL mkdir -p /storage/sdcard1
	TEXECL mount -o remount,ro rootfs /
fi

# As a precaution, give users a way out. This works best if the user has an external sdcard.
if [ -f "${DRPATH}/donotrun" ]; then

	TECHOL "Exitting by DNR file.";

	EXIT2CM

fi

if [ ! -d "/system/etc/init.d" ]; then
	TECHOL "No init.d directory found, creating it now!"
	TECHOL "To enable init.d support, set dr.enable.initd to true in XZDR.prop!"
	mkdir /system/etc/init.d
fi

if [ -e "/sbin/init.sh" -a "$EVENTNODE" != "none" ]; then
	echo "Will be calling /sbin/init.sh with arguments '$DRPATH' and '$LOGFILE'" >> ${PREPLOG}
fi

# Ending log
DATETIME=`${BUSYBOX} date +"%d-%m-%Y %H:%M:%S"`
echo "STOP Dual Recovery STAGE 1 at ${DATETIME}, starting stage 2!" >> ${PREPLOG}

# Copy the preperation log to the main log directory, easy to find for the noobish users...
cp ${PREPLOG} ${DRPATH}/

########
#
#
# Preperations all done, lets continue to recovery!
#
#
#######################################################################

# One last failsafe...
if [ -e "/sbin/init.sh" -a "$EVENTNODE" != "none" ]; then

	export PATH="${_PATH}"

	exec /sbin/init.sh $DRPATH $LOGFILE

else

	EXIT2CM

fi
